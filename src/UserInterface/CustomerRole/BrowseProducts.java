/*
 * BrowseProducts.java
 *
 * 
 */
package UserInterface.CustomerRole;

import Business.Business;
import Business.Customer;
import Business.MasterOrderCatalog;
import Business.Order;
import Business.OrderItem;
import Business.Product;

import Business.SalesPerson;
import Business.SalesPersonDirectory;
import Business.Supplier;


import UserInterface.AdminstrativeRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author ayushi
 */
public class BrowseProducts extends javax.swing.JPanel {

private JPanel userProcessContainer;
private MasterOrderCatalog masterOrderCatalog;
private Business business;
private Customer customer;
private SalesPersonDirectory salesPersonDirectory;
private Order order;
private Supplier supplier;
boolean isCheckOut = false;
    /** Creates new form BrowseProducts */
    public BrowseProducts(JPanel userProcessContainer,Customer customer, Business business) {
        initComponents();
       
        this.userProcessContainer = userProcessContainer;
        this.business= business;
        this.customer = customer;
        salesPersonDirectory = business.getSalesPersonDirectory();
        supplier = business.getSupplier();
        masterOrderCatalog = business.getMasterOrderCatalog();
        populateSalesCombo();
        populateProductTable();
        if(!isCheckOut) {
          order = new Order();
       }
    }

    private void populateSalesCombo(){
        
        salesComboBox1.removeAllItems();
        for (SalesPerson sp : salesPersonDirectory.getSalesPersonList()){
            salesComboBox1.addItem(sp);
        }
       
    }

    private void populateProductTable(){
        
        DefaultTableModel model = (DefaultTableModel)productTable.getModel();
        
        model.setRowCount(0);
        for(Product p: supplier.getProductCatalog().getProductcatalog()){
            Object row[] = new Object[4];
            row[0] = p;
            row[1]= p.getModelNumber();
            row[2]= p.getTargetPrice();
            row[3]= p.getAvail();
            //System.out.println("   Name of Product:" +p.getCeilingPrice());
            model.addRow(row);
        }
 
    }
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        salesComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(750, 511));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Product Id", "Sales Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 590, 110));

        salesComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesComboBox1ActionPerformed(evt);
            }
        });
        add(salesComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 72, 250, 30));

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel1.setText("Sales Person");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 110, 30));

        jLabel2.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel2.setText("Product Catalog");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 240, -1));

        btnBack.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, 90, -1));

        viewProdjButton2.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });
        add(viewProdjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 180, -1));

        addtoCartButton6.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 330, 190, 30));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 290, 60, -1));

        jLabel5.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel5.setText("Quantity");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, -1, -1));

        jLabel6.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel6.setText("Sales Price");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, 100, -1));
        add(txtSalesPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 290, 90, -1));

        jLabel7.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        jLabel7.setText("Item in cart");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 120, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Quantity", "Total Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 580, 110));

        btnViewOrderItem.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });
        add(btnViewOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 510, -1, -1));

        btnModifyQuantity.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 510, -1, -1));

        btnRemoveOrderItem.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, 90, -1));

        btnCheckOut.setFont(new java.awt.Font("Calibri", 3, 17)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 510, -1, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 510, 70, 30));

        jLabel3.setFont(new java.awt.Font("Calibri", 3, 24)); // NOI18N
        jLabel3.setText("Browse Catalog and Place Order");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 340, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void salesComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesComboBox1ActionPerformed
        // TODO add your handling code here:
       //populateProductTable();
        
    }//GEN-LAST:event_salesComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
       //if(!isCheckOut){
        if (order.getOrderItemList().size() > 0) {
            ArrayList<OrderItem> orderList = order.getOrderItemList();
            for (OrderItem orderItem : orderList) {
                Product p = orderItem.getProduct();
                p.setAvail(orderItem.getQuantity() + p.getAvail());
            }
            order.getOrderItemList().removeAll(orderList);
        }
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        int row = productTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the table!");
            return;
        }
        Product p = (Product) productTable.getValueAt(row, 0);
        ViewProductDetailJPanel vpdjp = new ViewProductDetailJPanel(userProcessContainer,p);
        userProcessContainer.add("ViewProductDetailJPanelCustomer", vpdjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        SalesPerson salesPerson = (SalesPerson)salesComboBox1.getSelectedItem();
         int selectedRow = productTable.getSelectedRow();
        Product selectedProduct;
        int salesPrice;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedProduct = (Product) productTable.getValueAt(selectedRow, 0);
        }

        try {
            salesPrice = Integer.parseInt(txtSalesPrice.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid sales price", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (salesPrice < selectedProduct.getFloorPrice()) {
            JOptionPane.showMessageDialog(this, "Sales Price should be more than Actual Price", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected atlest 1 quantity", "Warning", JOptionPane.WARNING_MESSAGE);
         
        } else if (fetchedQty <= selectedProduct.getAvail()) {
            boolean alreadyPresent = false;
            for (OrderItem orderItem : order.getOrderItemList()) {
                if (orderItem.getProduct() == selectedProduct) {
                    int oldAvail = selectedProduct.getAvail();
                    int newAvail = oldAvail - fetchedQty;
                    selectedProduct.setAvail(newAvail);
                    orderItem.setQuantity(fetchedQty + orderItem.getQuantity());
                    alreadyPresent = true;
                    refreshOrderTable();
                    populateProductTable();
                    break;
                }
            }

            if (!alreadyPresent) {
                int oldAvail = selectedProduct.getAvail();
                int newAvail = oldAvail - fetchedQty;
                selectedProduct.setAvail(newAvail);
                order.addOrderItem(selectedProduct, fetchedQty, salesPrice,"Pending");

                order.setCustomer(customer);
                order.setSalesPerson(salesPerson);
                System.out.println(salesPerson.getName());
                System.out.println(customer.getName());
                System.out.println(order.getCustomer().getName());
                System.out.println(order.getSalesPerson().getName());
                refreshOrderTable();
                populateProductTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

       
   
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    public void refreshOrderTable(){
           DefaultTableModel model = (DefaultTableModel)orderTable.getModel();
           model.setRowCount(0);
           for(OrderItem oi: order.getOrderItemList()){
            Object row[] = new Object[5];
            row[0] = oi;
            row[1]= oi.getCustomerPrice();
            row[2]=oi.getQuantity();
            row[3]=oi.getCustomerPrice()*oi.getQuantity();
            row[4]=oi.getStatus();
            model.addRow(row);  
           }
       }
    
    
    
    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
       if (order.getOrderItemList().size() > 0) {
            masterOrderCatalog.addOrder(order);
            isCheckOut = true;
            JOptionPane.showMessageDialog(null, "Order added ssuccessfully!!");
            order = new Order();
            refreshOrderTable();
            populateProductTable();
        } else {
            JOptionPane.showMessageDialog(null, "Order not added as there are no items!!");
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = orderTable.getSelectedRow();
        //Product selectedProduct;
        //int salesPrice=0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0")) {
            OrderItem orderItem = (OrderItem) orderTable.getValueAt(selectedRow, 0);
            int currentAvail = orderItem.getProduct().getAvail();
            int oldQty = orderItem.getQuantity();
            int newQty = Integer.parseInt(txtNewQuantity.getText());
            if (newQty > (currentAvail + oldQty)) {
                JOptionPane.showMessageDialog(null, "Quantity is more than the availability");
                //return;
            } else {
                if (newQty <= 0) {
                    JOptionPane.showMessageDialog(null, "Invalid qty");
                    return;
                }
                orderItem.setQuantity(newQty);
                orderItem.getProduct().setAvail(currentAvail + (oldQty - newQty));
                refreshOrderTable();
                populateProductTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero!!");
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
       
       int selectedRowCount = orderTable.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the orderItem table!");
            return;
        }

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }

        OrderItem oi = (OrderItem) orderTable.getValueAt(row, 0);
        int oldQuantity = oi.getProduct().getAvail();
        int orderQuantity = oi.getQuantity();
        int newQuantity = oldQuantity + orderQuantity;
        oi.getProduct().setAvail(newQuantity);
        order.removeOrderItem(oi);
        JOptionPane.showMessageDialog(null, "The order item of " + orderQuantity + "of " + oi + " has been removed.");
        refreshOrderTable();
        populateProductTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        
          int selectedRowCount = orderTable.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the orderItem table!");
            return;
        }

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }
        OrderItem oi = (OrderItem) orderTable.getValueAt(row, 0);
        ViewOrderItemDetailJPanel voidjp = new ViewOrderItemDetailJPanel(userProcessContainer, oi);
        userProcessContainer.add("ViewOrderItemDetailJPanel", voidjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox salesComboBox1;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
